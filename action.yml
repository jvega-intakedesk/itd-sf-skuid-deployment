name: ITD Skuid Pages Deployment
description: GitHub Action Script to Deploy the Skuid Pages to a given environment
author: csilva-intakedesk
branding:
  icon: terminal
  color: red

inputs:
  LOG_LEVEL:
    description: >
      Skuid command flag --loglevel. Logging level for this command invocation.
      Defaults to Error.
    type: choice
    default: error
    options:
      - trace
      - debug
      - info
      - warn
      - error
      - fatal
  TARGET_USERNAME_ALIAS:
    description: >
      Skuid command flag --targetusername. Username or alias for the target org;
      overrides default target org set with SF.
    type: string
  MODULES:
    description: >
      The Skuid command flag --modules. It will default to ITD modules. Should
      be passed separated by comma if more than one.
    type: string
  SF_AUTH_URL:
    description: The Salesforce Auth URL
    type: string
    required: true

runs:
  using: composite
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        sf version --verbose --json

    - name: Installing SF Skuid Pages Plugin
      shell: bash
      run: |
        echo y | sf plugins install skuid-sfdx
        sf plugins

    - name: Environment Login
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SF_AUTH_URL }}")

    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v45.0.1

    - name: SKUID Pages Deployment
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      shell: bash
      run: |
        syncFlags=()

        if [ ! -z "${{ inputs.TARGET_USERNAME_ALIAS }}" ]; then
            syncFlags+=( --targetusername="${{ inputs.TARGET_USERNAME_ALIAS }}" )
        fi

        echo "::debug:: Pages that were changed in this PR: ${ALL_CHANGED_FILES}"

        deploy=false
        declare -a pages=()  # Create an array to store individual page file paths

        # Ensure the script does not exit on error
        set +e

        # Split ALL_CHANGED_FILES into an array using space as delimiter
        IFS=' ' read -r -a files_array <<< "$ALL_CHANGED_FILES"

        # Iterate over each changed file
        for file in "${files_array[@]}"; do
            echo "Processing file: $file"
            if [[ "$file" == *"skuidpages/"* ]]; then
                echo "::debug:: Page being deployed: $file"
                # Extract the file name without the directory prefix
                filename="${file##*/}"  # Get the file name from the path
                pages+=("$filename")  # Add each valid page to the pages array
                deploy=true
            fi
        done

        set -e

        echo "::debug::"
        echo "::debug:: Deploying pages."
        echo "::debug:: Has changes to be deployed? $deploy"
        echo "::debug::"

        if [ "$deploy" = true ]; then
            echo "Current working directory: $(pwd)"
            # Loop through each page and push them one by one
            for page in "${pages[@]}"; do
                # Check if the file exists in the current working directory
                if [ -f "./$page" ]; then
                    echo "::debug:: Deploying page individually: $page"
                    # Use the page directly without asterisks
                    echo "sf skuid page push ${syncFlags[@]} $page"  # Debug output with the page name
                    sf skuid page push "${syncFlags[@]}" "$page"  # Use the page name without wildcards
                else
                    echo "::debug:: File does not exist: $page"
                fi
            done
        else
            echo "::debug:: No specific changes to deploy."
            echo "::debug:: A full deploy is not possible because it will pass the max limit of 6 million characters imposed by Salesforce."
            echo "::debug:: Nothing to deploy."
        fi
